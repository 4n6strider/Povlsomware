<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABkAAAAqgAA
        ANYAAADsAAAA7AAAANYAAACqAAAAZAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACGAAAA8gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8gAAAIYAAAAMAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAA2gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANoAAAAsAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANgAA
        AO4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AO4AAAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABoAAADoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOgAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAtAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA4gAAAOIAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAO4AAAAMAAAADAAA
        AO4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3gAA
        AAAAAAAAAAAA3gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAArAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAD0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADeAAAAAAAAAAAAAADeAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD0AAAACAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAN4AAAAAAAAAAAAAAN4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAxgAAAAAAAAAAAAAAxgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAAAYAAAAAAAAAAAAAAAYAAAA8gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUgAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAwAAAAAAAAAAAAAAAAAAAAAAAAADAAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAwAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADoAAAACgAAAAAAAAAAAAAACgAA
        AOgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAC4AAAAOAAA
        ADgAAAC4AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADuAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAJ4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAPwAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAMAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAngAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AJ4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA/wAA
        AP8AAAD/AAAA2gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADaAAAA/wAA
        AP8AAAD/AAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABwAAAD/AAAA/wAAAP8AAABQAAAAagAAAOoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADqAAAAagAA
        AFAAAAD/AAAA/wAAAP8AAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHAAAAP8AAAD/AAAA/wAAAE4AAAAAAAAACAAAAEwAAAB+AAAAjgAAAI4AAAB+AAAATAAA
        AAgAAAAAAAAATgAAAP8AAAD/AAAA/wAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAcAAAA/wAAAP8AAAD/AAAATgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABOAAAA/wAAAP8AAAD/AAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAD/AAAA/wAAAP8AAABQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAD/AAAA/wAAAP8AAAAcAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAP8AAAD/AAAA/wAAAF4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXgAAAP8AAAD/AAAA/wAAABQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAP8AAAD/AAAAkgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACSAAAA/wAAAP8AAADwAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0AAAA/wAA
        AP8AAADsAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAOwAAAD/AAAA/wAA
        ALQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AFQAAAD/AAAA/wAAAP8AAACqAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACqAAAA/wAA
        AP8AAAD/AAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAM4AAAD/AAAA/wAAAP8AAACyAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAsgAA
        AP8AAAD/AAAA/wAAAM4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAPIAAAD/AAAA/wAAAP8AAAD2AAAAsAAAAIIAAACCAAAAsAAA
        APYAAAD/AAAA/wAAAP8AAADyAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAPAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA8AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAL4AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAL4AAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AD4AAACWAAAA0AAAAOoAAADqAAAA0AAAAJYAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf///AA///gAH//wAA//4AAH/8AAA//AGAP/gBgB/4AYAf+AGAH/gB
        gB/4A8Af+APAH/gDwB/4AYAf+AAAH/wAAD/8AAA//gAAf/4wDH/+Pnx//j/8f/4//H/+P/x//h/4f/4f
        +H//D/D//wfg//+AAf//wAP//+AH///4H/8=
</value>
  </data>
</root>